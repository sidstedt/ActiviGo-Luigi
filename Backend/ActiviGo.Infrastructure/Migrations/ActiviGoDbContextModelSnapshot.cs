// <auto-generated />
using System;
using ActiviGo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ActiviGo.Infrastructure.Migrations
{
    [DbContext(typeof(ActiviGoDbContext))]
    partial class ActiviGoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActiviGo.Domain.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("StaffId");

                    b.HasIndex("ZoneId", "IsAvailable");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lugn yogaklass för rörlighet och fokus",
                            DurationMinutes = 60,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 15,
                            Name = "Yoga Grund",
                            Price = 150m,
                            StaffId = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stabilitet och bålstyrka",
                            DurationMinutes = 55,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 15,
                            Name = "Pilates Core",
                            Price = 150m,
                            StaffId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Högintensiv cykelträning",
                            DurationMinutes = 45,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 20,
                            Name = "Spinning Intervall",
                            Price = 180m,
                            StaffId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Utomhusträning med bollteknik",
                            DurationMinutes = 90,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 22,
                            Name = "Fotbollsträning",
                            Price = 120m,
                            StaffId = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Grundläggande säkerhet och teknik",
                            DurationMinutes = 75,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 10,
                            Name = "Klättring Introduktion",
                            Price = 200m,
                            StaffId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Teknikpass för bättre effektivitet i vattnet",
                            DurationMinutes = 60,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 12,
                            Name = "Simteknik",
                            Price = 160m,
                            StaffId = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Avslappning och mental återhämtning",
                            DurationMinutes = 45,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 12,
                            Name = "Relax & Meditation",
                            Price = 100m,
                            StaffId = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Instruktörsletta baslyft och teknik",
                            DurationMinutes = 60,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 16,
                            Name = "Styrketräning Bas",
                            Price = 170m,
                            StaffId = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kort och intensivt pass",
                            DurationMinutes = 35,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 14,
                            Name = "HIIT Express",
                            Price = 140m,
                            StaffId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cirkelträning utomhus",
                            DurationMinutes = 50,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 20,
                            Name = "Utegym Cirkel",
                            Price = 30m,
                            StaffId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Boka bana för singelspel",
                            DurationMinutes = 60,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = true,
                            MaxParticipants = 2,
                            Name = "Tennis Singel",
                            Price = 120m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Boka bana för dubbelspel",
                            DurationMinutes = 60,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = true,
                            MaxParticipants = 4,
                            Name = "Tennis Dubbel",
                            Price = 160m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öppen tillgång till gymmet",
                            DurationMinutes = 120,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 40,
                            Name = "Öppet Gym",
                            Price = 90m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Självservice utomhusträning",
                            DurationMinutes = 120,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 30,
                            Name = "Öppet Utegym",
                            Price = 50m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Allsidigt pass i multifunktionssal",
                            DurationMinutes = 55,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 18,
                            Name = "Multifunktion Flex",
                            Price = 150m,
                            StaffId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 13
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spontan fotboll – drop-in",
                            DurationMinutes = 90,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 28,
                            Name = "Fotboll Öppen Träning",
                            Price = 50m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 14
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Självservice bokning av plan",
                            DurationMinutes = 120,
                            ImageUrl = "",
                            IsAvailable = true,
                            IsPrivate = true,
                            MaxParticipants = 22,
                            Name = "Bokning Fotbollsplan A",
                            Price = 200m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 14
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.ActivityOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ZoneId");

                    b.HasIndex("ActivityId", "StartTime");

                    b.ToTable("ActivityOccurrences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 10, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 10, 10, 8, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 12, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 3, 19, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 12, 3, 18, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 11,
                            ActivityId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 5, 19, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 12, 5, 18, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 12,
                            ActivityId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 90,
                            EndTime = new DateTime(2025, 12, 6, 10, 30, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 12, 6, 9, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 13,
                            ActivityId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2024, 12, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2024, 12, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 14,
                            ActivityId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 10, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 10, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 15,
                            ActivityId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 10, 15, 11, 30, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 10, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 16,
                            ActivityId = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 11, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 1, 7, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 17,
                            ActivityId = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 35,
                            EndTime = new DateTime(2025, 11, 1, 12, 35, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 9
                        },
                        new
                        {
                            Id = 18,
                            ActivityId = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 50,
                            EndTime = new DateTime(2025, 11, 2, 16, 50, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 2, 16, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 19,
                            ActivityId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 11, 3, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 3, 14, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 11
                        },
                        new
                        {
                            Id = 20,
                            ActivityId = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 11, 3, 16, 30, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 3, 15, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 12
                        },
                        new
                        {
                            Id = 21,
                            ActivityId = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 120,
                            EndTime = new DateTime(2025, 11, 4, 8, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 4, 6, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 8
                        },
                        new
                        {
                            Id = 22,
                            ActivityId = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 120,
                            EndTime = new DateTime(2025, 11, 4, 11, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 4, 9, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 10
                        },
                        new
                        {
                            Id = 23,
                            ActivityId = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 55,
                            EndTime = new DateTime(2025, 11, 5, 18, 55, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 5, 18, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 13
                        },
                        new
                        {
                            Id = 24,
                            ActivityId = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 90,
                            EndTime = new DateTime(2025, 11, 6, 18, 30, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 6, 17, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 14
                        },
                        new
                        {
                            Id = 25,
                            ActivityId = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 120,
                            EndTime = new DateTime(2025, 11, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            StartTime = new DateTime(2025, 11, 7, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 14
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityOccurrenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityOccurrenceId", "Status");

                    b.HasIndex("UserId", "ActivityOccurrenceId")
                        .IsUnique();

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityOccurrenceId = 11,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("240babc8-287b-49a9-904f-ff81d301eb50")
                        },
                        new
                        {
                            Id = 2,
                            ActivityOccurrenceId = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 4,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("ba556bf4-37ae-49c1-9c73-3ed329956a79")
                        },
                        new
                        {
                            Id = 3,
                            ActivityOccurrenceId = 2,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 3,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("240babc8-287b-49a9-904f-ff81d301eb50")
                        },
                        new
                        {
                            Id = 4,
                            ActivityOccurrenceId = 3,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("ba556bf4-37ae-49c1-9c73-3ed329956a79")
                        },
                        new
                        {
                            Id = 5,
                            ActivityOccurrenceId = 16,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("240babc8-287b-49a9-904f-ff81d301eb50")
                        },
                        new
                        {
                            Id = 6,
                            ActivityOccurrenceId = 19,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("ba556bf4-37ae-49c1-9c73-3ed329956a79")
                        },
                        new
                        {
                            Id = 7,
                            ActivityOccurrenceId = 20,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("240babc8-287b-49a9-904f-ff81d301eb50")
                        },
                        new
                        {
                            Id = 8,
                            ActivityOccurrenceId = 23,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("ba556bf4-37ae-49c1-9c73-3ed329956a79")
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fysisk träning och kondition",
                            Name = "Träning",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Aktiviteter utomhus",
                            Name = "Utomhusaktiviteter",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fotboll, Tennis m.fl.",
                            Name = "Bollsport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Simning och vatten",
                            Name = "Vattenaktiviteter",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yoga, meditation, avslappning",
                            Name = "Wellness",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Centralvägen 10, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.312100000000001,
                            Longitude = 18.067399999999999,
                            Name = "Huvudhall",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sundbybergsvägen 22, Solna",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.361199999999997,
                            Longitude = 18.001200000000001,
                            Name = "Spinninganläggningen",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rosenlundsgatan 45, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.312899999999999,
                            Longitude = 18.046299999999999,
                            Name = "Klätterhallen",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Lidingövägen 55, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.347799999999999,
                            Longitude = 18.0901,
                            Name = "Tenniscentret",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Björkhagen 7, Nacka",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.293500000000002,
                            Longitude = 18.132400000000001,
                            Name = "Fotbollsanläggningen",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Address = "Stadshagsvägen 12, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.3399,
                            Longitude = 18.018699999999999,
                            Name = "Simhallen",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Address = "Drottninggatan 88, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.333399999999997,
                            Longitude = 18.0639,
                            Name = "Spa & Relax",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Address = "Solsidans Allé 1, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.280099999999997,
                            Longitude = 18.220099999999999,
                            Name = "Träningscenter Solsidan",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("240babc8-287b-49a9-904f-ff81d301eb50"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66aa839d-b8c4-4c84-aca2-0aeeaad6d7ed",
                            CreatedAt = new DateTime(2025, 10, 24, 12, 36, 4, 899, DateTimeKind.Utc).AddTicks(9059),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            IsActive = true,
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqk7M4rEf69t/ngi65PW1NTmRBUwXBIBE18h75r33uyCXYsLBIXQ8oo4/jaLOuJfw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 24, 12, 36, 4, 899, DateTimeKind.Utc).AddTicks(9067),
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = new Guid("ba556bf4-37ae-49c1-9c73-3ed329956a79"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93c133bd-380a-4589-bcec-a259ffcadd7e",
                            CreatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 29, DateTimeKind.Utc).AddTicks(3572),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bertil",
                            IsActive = true,
                            LastName = "Berg",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJdARdxyeL0h6AUfxRNCHcT5Fb1gp9ygPJ3viWOZZBXn0xWHxCWwv+amXuojNoRDQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 29, DateTimeKind.Utc).AddTicks(3579),
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b704333e-a731-4853-9ea8-84ecada89d1c",
                            CreatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 152, DateTimeKind.Utc).AddTicks(3445),
                            Email = "sara@activigo.se",
                            EmailConfirmed = true,
                            FirstName = "Sara",
                            IsActive = true,
                            LastName = "Sund",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@ACTIVIGO.SE",
                            NormalizedUserName = "SARA@ACTIVIGO.SE",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+8HrgwoVHaBEqmBMnbUiW0d4FXlY9g5fQ3Z/oX3/nFFHNSkuRPxp4HWk+Jjg1oJw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 152, DateTimeKind.Utc).AddTicks(3454),
                            UserName = "sara@activigo.se"
                        },
                        new
                        {
                            Id = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80058734-38f2-4857-9350-adfa56e0510d",
                            CreatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 305, DateTimeKind.Utc).AddTicks(736),
                            Email = "simon@activigo.se",
                            EmailConfirmed = true,
                            FirstName = "Simon",
                            IsActive = true,
                            LastName = "Strand",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIMON@ACTIVIGO.SE",
                            NormalizedUserName = "SIMON@ACTIVIGO.SE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDfspFCZNXYeodwYcjiIU0kABKCP7YuvoC8ehc33UtOc9l/L+lXhHg73SEV+j7KrKQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 305, DateTimeKind.Utc).AddTicks(742),
                            UserName = "simon@A.com"
                        },
                        new
                        {
                            Id = new Guid("f3d6f133-7c9a-47a7-92e0-1f1ce7592e68"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bd2a149-0fca-4593-8934-2d339f6e0f80",
                            CreatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 443, DateTimeKind.Utc).AddTicks(1952),
                            Email = "admin@activigo.se",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Super",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ACTIVIGO.SE",
                            NormalizedUserName = "ADMIN@ACTIVIGO.SE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFsHNB5mp4fE7n4xbcb5yJsq1siwBrAfx+wWp2BJJp9a1DVnqRxEXdq/3s8Z47yoQA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 24, 12, 36, 5, 443, DateTimeKind.Utc).AddTicks(1958),
                            UserName = "admin@activigo.se"
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOutdoor")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId", "Name")
                        .IsUnique();

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 1,
                            Name = "Yoga & Pilates Sal",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 2,
                            Name = "Spinning Sal",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 3,
                            Name = "Klättervägg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 4,
                            Name = "Tennisbana Utomhus",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 5,
                            Name = "Fotbollsplan Huvud",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 6,
                            Name = "25m Bassäng",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 7,
                            Name = "Relaxavdelning",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 8,
                            Name = "Stora Gymmet",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 8,
                            Name = "Lilla Gymmet",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 8,
                            Name = "Utegym",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 8,
                            Name = "Tennisbana 1",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 8,
                            Name = "Tennisbana 2",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocationId = 8,
                            Name = "Multifunktionssal",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 5,
                            Name = "Fotbollsplan A",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 5,
                            Name = "Fotbollsplan B",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocationId = 5,
                            Name = "Fotbollsplan C",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e05514c-d583-4c2c-b55b-97a44aaeaf73"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("c4bb39b1-d711-4d39-8e70-7b27dae15bb3"),
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("8e0861fc-c798-41b0-8bfb-e24a7979c4ec"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("240babc8-287b-49a9-904f-ff81d301eb50"),
                            RoleId = new Guid("4e05514c-d583-4c2c-b55b-97a44aaeaf73")
                        },
                        new
                        {
                            UserId = new Guid("ba556bf4-37ae-49c1-9c73-3ed329956a79"),
                            RoleId = new Guid("4e05514c-d583-4c2c-b55b-97a44aaeaf73")
                        },
                        new
                        {
                            UserId = new Guid("34e150ae-706e-46cb-8043-199f15adc38d"),
                            RoleId = new Guid("c4bb39b1-d711-4d39-8e70-7b27dae15bb3")
                        },
                        new
                        {
                            UserId = new Guid("a673d0a7-7719-45bd-80b3-a0b5055fb54a"),
                            RoleId = new Guid("c4bb39b1-d711-4d39-8e70-7b27dae15bb3")
                        },
                        new
                        {
                            UserId = new Guid("f3d6f133-7c9a-47a7-92e0-1f1ce7592e68"),
                            RoleId = new Guid("8e0861fc-c798-41b0-8bfb-e24a7979c4ec")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Activity", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.Category", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.User", "Staff")
                        .WithMany("StaffActivities")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ActiviGo.Domain.Models.Zone", "Zone")
                        .WithMany("Activities")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Staff");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.ActivityOccurrence", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.Activity", "Activity")
                        .WithMany("Occurrences")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.Zone", "Zone")
                        .WithMany("ActivityOccurrences")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Booking", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.ActivityOccurrence", "ActivityOccurrence")
                        .WithMany("Bookings")
                        .HasForeignKey("ActivityOccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityOccurrence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Zone", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.Location", "Location")
                        .WithMany("Zones")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefreshToken", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Activity", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.ActivityOccurrence", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Category", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Location", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("StaffActivities");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Zone", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ActivityOccurrences");
                });
#pragma warning restore 612, 618
        }
    }
}
