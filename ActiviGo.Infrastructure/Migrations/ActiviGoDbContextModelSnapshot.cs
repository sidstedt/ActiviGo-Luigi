// <auto-generated />
using System;
using ActiviGo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ActiviGo.Infrastructure.Migrations
{
    [DbContext(typeof(ActiviGoDbContext))]
    partial class ActiviGoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActiviGo.Domain.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("StaffId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StaffId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Relaxing yoga session",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 15,
                            Name = "Yoga",
                            Price = 15m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Core Pilates class",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 15,
                            Name = "Pilates",
                            Price = 15m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "High intensity spinning",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 20,
                            Name = "Spinning",
                            Price = 20m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Outdoor football training",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 22,
                            Name = "Football Practice",
                            Price = 10m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tennis training session",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 8,
                            Name = "Tennis Practice",
                            Price = 12m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Indoor climbing",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 10,
                            Name = "Climbing",
                            Price = 18m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lap swimming session",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 12,
                            Name = "Swimming Training",
                            Price = 15m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fun aquatic exercise",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 15,
                            Name = "Water Aerobics",
                            Price = 15m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mindfulness meditation",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 15,
                            Name = "Meditation",
                            Price = 10m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 7
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Track and field practice",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = false,
                            MaxParticipants = 20,
                            Name = "Athletics",
                            Price = 12m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Individuell coachning",
                            DurationMinutes = 0,
                            IsActive = true,
                            IsAvailable = true,
                            IsPrivate = true,
                            MaxParticipants = 1,
                            Name = "One-on-One Coaching",
                            Price = 50m,
                            StaffId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.ActivityOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ActivityOccurrences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 10, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 10, 10, 8, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 12, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 3, 19, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 12, 3, 18, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 11,
                            ActivityId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 5, 19, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 12, 5, 18, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 12,
                            ActivityId = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 12, 6, 10, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 12, 6, 9, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 13,
                            ActivityId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 1, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 1, 15, 8, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 14,
                            ActivityId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 10, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 10, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 15,
                            ActivityId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            EndTime = new DateTime(2025, 10, 15, 11, 30, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 10, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = 1
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityOccurrenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityOccurrenceId");

                    b.HasIndex("UserId", "ActivityOccurrenceId")
                        .IsUnique();

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityOccurrenceId = 11,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("4eaf5b21-8f0b-4bcf-9c8b-6af7d2c933c6")
                        },
                        new
                        {
                            Id = 2,
                            ActivityOccurrenceId = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 4,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("a1c5fd4c-ec97-4eb5-9a67-135a3b1807f1")
                        },
                        new
                        {
                            Id = 3,
                            ActivityOccurrenceId = 2,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 3,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("4eaf5b21-8f0b-4bcf-9c8b-6af7d2c933c6")
                        },
                        new
                        {
                            Id = 4,
                            ActivityOccurrenceId = 3,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("a1c5fd4c-ec97-4eb5-9a67-135a3b1807f1")
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Physical training and exercise",
                            Name = "Training",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Activities outdoors",
                            Name = "Outdoor Activities",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Football, Tennis, etc.",
                            Name = "Ball Sports",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Swimming and water activities",
                            Name = "Aquatics",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yoga, meditation, etc.",
                            Name = "Wellness",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Centralvägen 10, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.312100000000001,
                            Longitude = 18.067399999999999,
                            Name = "Gym Hall",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sundbybergsvägen 22, Solna",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.361199999999997,
                            Longitude = 18.001200000000001,
                            Name = "Spinning Room",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rosenlundsgatan 45, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.312899999999999,
                            Longitude = 18.046299999999999,
                            Name = "Climbing Wall",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Lidingövägen 55, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.347799999999999,
                            Longitude = 18.0901,
                            Name = "Tennis Court",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Björkhagen 7, Nacka",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.293500000000002,
                            Longitude = 18.132400000000001,
                            Name = "Football Field",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Address = "Stadshagsvägen 12, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.3399,
                            Longitude = 18.018699999999999,
                            Name = "Swimming Pool",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Address = "Drottninggatan 88, Stockholm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 59.333399999999997,
                            Longitude = 18.0639,
                            Name = "Spa & Relax",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4eaf5b21-8f0b-4bcf-9c8b-6af7d2c933c6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ba9cb82-bdd7-44ff-9130-9ffc5a835f33",
                            CreatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 464, DateTimeKind.Utc).AddTicks(2916),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            IsActive = true,
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDzA1O+T0IMVDI0mtVcVkft+og1aEnXRcDUFHcRIstVsqGbsDpS0cEWJoyk0KUir3Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 464, DateTimeKind.Utc).AddTicks(2920),
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = new Guid("a1c5fd4c-ec97-4eb5-9a67-135a3b1807f1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11fea9e7-262c-451a-abfb-99509bc17eed",
                            CreatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 538, DateTimeKind.Utc).AddTicks(3112),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            IsActive = true,
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE6EALum5t/GdbVR0ALKnXmgPJwwxCquiRfjziEk2k/cfP6EffFpcwDIGqc+uzRIJw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 538, DateTimeKind.Utc).AddTicks(3125),
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4e63781-d2d5-4b05-bfd1-a1cfc07294c1",
                            CreatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 637, DateTimeKind.Utc).AddTicks(229),
                            Email = "staff@example.com",
                            EmailConfirmed = true,
                            FirstName = "Staff",
                            IsActive = true,
                            LastName = "Member",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@EXAMPLE.COM",
                            NormalizedUserName = "STAFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELJSqojiO9kPD4BYwYyBasv7F3GfFQJNa1k53WfW+1PJNVn3wsvaXxDyqMdnDLiC2Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 637, DateTimeKind.Utc).AddTicks(241),
                            UserName = "staff@example.com"
                        },
                        new
                        {
                            Id = new Guid("ef2543ac-2372-4d23-99ab-43498d2bdc77"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2bb878f-e7f3-43f4-bb3f-4ff76da22dcb",
                            CreatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 716, DateTimeKind.Utc).AddTicks(8779),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Super",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIfJCJopyfdvJXqyXTJ5SUWQZnMJActryrGhlZX5XhZUKw4hCSWzUBxNHgjuNL/fww==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 10, 7, 10, 59, 24, 716, DateTimeKind.Utc).AddTicks(8786),
                            UserName = "admin@example.com"
                        });
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOutdoor")
                        .HasColumnType("bit");

                    b.Property<int>("LocaitonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocaitonId");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocaitonId = 1,
                            Name = "Yoga & Pilates Studio",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocaitonId = 2,
                            Name = "Spinning Hall",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocaitonId = 3,
                            Name = "Climbing Zone",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocaitonId = 4,
                            Name = "Tennis Zone",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = true,
                            LocaitonId = 5,
                            Name = "Football Arena",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocaitonId = 6,
                            Name = "Aquatic Center",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOutdoor = false,
                            LocaitonId = 7,
                            Name = "Spa & Relax Area",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce8e3343-946c-44a6-bf1e-b1ca1cfb4855"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("90921b8a-db4f-4466-ae25-58fd99468646"),
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("39b1edae-9b01-4cff-b151-6f7b4af5dbf6"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4eaf5b21-8f0b-4bcf-9c8b-6af7d2c933c6"),
                            RoleId = new Guid("ce8e3343-946c-44a6-bf1e-b1ca1cfb4855")
                        },
                        new
                        {
                            UserId = new Guid("a1c5fd4c-ec97-4eb5-9a67-135a3b1807f1"),
                            RoleId = new Guid("ce8e3343-946c-44a6-bf1e-b1ca1cfb4855")
                        },
                        new
                        {
                            UserId = new Guid("cfe2a822-daeb-4bb4-88a9-eed19d24bc3e"),
                            RoleId = new Guid("90921b8a-db4f-4466-ae25-58fd99468646")
                        },
                        new
                        {
                            UserId = new Guid("ef2543ac-2372-4d23-99ab-43498d2bdc77"),
                            RoleId = new Guid("39b1edae-9b01-4cff-b151-6f7b4af5dbf6")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Activity", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.Category", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.User", "Staff")
                        .WithMany("StaffActivities")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.Zone", "Zone")
                        .WithMany("Activities")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Staff");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.ActivityOccurrence", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.Activity", "Activity")
                        .WithMany("Occurrences")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.Zone", "Zone")
                        .WithMany("ActivityOccurrences")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Booking", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.ActivityOccurrence", "ActivityOccurrence")
                        .WithMany("Bookings")
                        .HasForeignKey("ActivityOccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityOccurrence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Zone", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.Location", "Location")
                        .WithMany("Zones")
                        .HasForeignKey("LocaitonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefreshToken", b =>
                {
                    b.HasOne("ActiviGo.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Activity", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.ActivityOccurrence", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Category", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Location", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("StaffActivities");
                });

            modelBuilder.Entity("ActiviGo.Domain.Models.Zone", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ActivityOccurrences");
                });
#pragma warning restore 612, 618
        }
    }
}
